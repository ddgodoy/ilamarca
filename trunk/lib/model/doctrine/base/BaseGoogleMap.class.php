<?php

/**
 * BaseGoogleMap
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property text $map_content
 * @property integer $real_property_id
 * @property RealProperty $RealProperty
 * 
 * @method integer      getId()               Returns the current record's "id" value
 * @method text         getMapContent()       Returns the current record's "map_content" value
 * @method integer      getRealPropertyId()   Returns the current record's "real_property_id" value
 * @method RealProperty getRealProperty()     Returns the current record's "RealProperty" value
 * @method GoogleMap    setId()               Sets the current record's "id" value
 * @method GoogleMap    setMapContent()       Sets the current record's "map_content" value
 * @method GoogleMap    setRealPropertyId()   Sets the current record's "real_property_id" value
 * @method GoogleMap    setRealProperty()     Sets the current record's "RealProperty" value
 * 
 * @package    sf_icox
 * @subpackage model
 * @author     pinika
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseGoogleMap extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('google_map');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('map_content', 'text', null, array(
             'type' => 'text',
             ));
        $this->hasColumn('real_property_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));

        $this->option('collate', 'utf8_general_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('RealProperty', array(
             'local' => 'real_property_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}