<?php

/**
 * BaseSearchMatch
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $search_profile_id
 * @property integer $real_property_id
 * @property SearchProfile $SearchProfile
 * @property RealProperty $RealProperty
 * 
 * @method integer       getSearchProfileId()   Returns the current record's "search_profile_id" value
 * @method integer       getRealPropertyId()    Returns the current record's "real_property_id" value
 * @method SearchProfile getSearchProfile()     Returns the current record's "SearchProfile" value
 * @method RealProperty  getRealProperty()      Returns the current record's "RealProperty" value
 * @method SearchMatch   setSearchProfileId()   Sets the current record's "search_profile_id" value
 * @method SearchMatch   setRealPropertyId()    Sets the current record's "real_property_id" value
 * @method SearchMatch   setSearchProfile()     Sets the current record's "SearchProfile" value
 * @method SearchMatch   setRealProperty()      Sets the current record's "RealProperty" value
 * 
 * @package    sf_icox
 * @subpackage model
 * @author     pinika
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseSearchMatch extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('search_match');
        $this->hasColumn('search_profile_id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'length' => 4,
             ));
        $this->hasColumn('real_property_id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'length' => 4,
             ));

        $this->option('collate', 'utf8_general_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('SearchProfile', array(
             'local' => 'search_profile_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('RealProperty', array(
             'local' => 'real_property_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}