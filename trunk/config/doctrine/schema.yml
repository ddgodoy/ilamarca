detect_relations: true
actAs: [Timestampable]
options:
  collate: utf8_general_ci
  charset: utf8

#
# COMPANY
#
Company:
  tableName: company
  columns:
    id:       { type: integer(4), primary: true, notnull: true, autoincrement: true }
    name:     { type: string(50), notnull: true }
    email:    { type: string(200) }
    address:  { type: string(100) }
    phone:    { type: string(50) }
    logo:     { type: string(50) }

#
# APP_USER
#
AppUser:
  tableName: app_user
  columns:
    id:            { type: integer(4), primary: true, notnull: true, autoincrement: true }
    name:          { type: string(100) }
    last_name:     { type: string(100) }
    email:         { type: string(200), notnull: true }
    photo:         { type: string(50) }
    salt:          { type: string(100) }
    password:      { type: string(100) }
    recover_token: { type: string(100) }
    enabled:       { type: boolean, default: true }
    last_access:   { type: datetime }
    company_id:    { type: integer(4), notnull: true }
    user_role_id:  { type: integer(4), notnull: true }

  relations:
    Company:  { class: Company, local: company_id, foreign: id, foreignAlias: Company, onDelete: CASCADE }
    UserRole: { class: UserRole, local: user_role_id, foreign: id, foreignAlias: UserRole, onDelete: CASCADE }

#
# USER_ROLE
#
UserRole:
  tableName: user_role
  columns:
    id:          { type: integer(4), primary: true, notnull: true, autoincrement: true }
    name:        { type: string(50), notnull: true }
    credentials: { type: string(250) }
    code:        { type: string(50) }

#
# BEDROOM
#
Bedroom:
  tableName: bedroom
  columns:
    id:    { type: integer(4), primary: true, notnull: true, autoincrement: true }
    name:  { type: string(50), notnull: true }

#
# COUNTRY
#
Country:
  tableName: country
  columns:
    id:    { type: integer(4), primary: true, notnull: true, autoincrement: true }
    name:  { type: string(100), notnull: true }

#
# GEO_ZONE
#
GeoZone:
  tableName: geo_zone
  columns:
    id:    { type: integer(4), primary: true, notnull: true, autoincrement: true }
    name:  { type: string(100), notnull: true }

#
# CITY
#
City:
  tableName: city
  columns:
    id:          { type: integer(4), primary: true, notnull: true, autoincrement: true }
    name:        { type: string(100), notnull: true }
    geo_zone_id: { type: integer(4), notnull: true }

  relations:
    GeoZone:  { class: GeoZone, local: geo_zone_id, foreign: id, foreignAlias: GeoZone, onDelete: CASCADE }

#
# NEIGHBORHOOD
#
Neighborhood:
  tableName: neighborhood
  columns:
    id:       { type: integer(4), primary: true, notnull: true, autoincrement: true }
    name:     { type: string(100), notnull: true }
    city_id:  { type: integer(4), notnull: true }

  relations:
    City:  { class: City, local: city_id, foreign: id, foreignAlias: City, onDelete: CASCADE }

#
# PROPERTY_TYPE
#
PropertyType:
  tableName: property_type
  columns:
    id:    { type: integer(4), primary: true, notnull: true, autoincrement: true }
    name:  { type: string(100), notnull: true }

#
# OPERATION
#
Operation:
  tableName: operation
  columns:
    id:    { type: integer(4), primary: true, notnull: true, autoincrement: true }
    name:  { type: string(50), notnull: true }

#
# CURRENCY
#
Currency:
  tableName: currency
  columns:
    id:       { type: integer(4), primary: true, notnull: true, autoincrement: true }
    name:     { type: string(50), notnull: true }
    iso_code: { type: string(5) }
    culture:  { type: string(5) }
    symbol:   { type: string(5) }

#
# VENDOR_ZONE
#
VendorZone:
  tableName: vendor_zone
  columns:
    id:              { type: integer(4), primary: true, notnull: true, autoincrement: true }
    app_user_id:     { type: integer(4) }
    neighborhood_id: { type: integer(4) }

  relations:
    AppUser:       { class: AppUser, local: app_user_id, foreign: id, foreignAlias: VendorZones, onDelete: CASCADE }
    Neighborhood:  { class: Neighborhood, local: neighborhood_id, foreign: id, foreignAlias: VendorZones, onDelete: CASCADE }

#
# REAL_PROPERTY
#
RealProperty:
  tableName: real_property
  actAs:
    I18n:
      fields: [name, detail, address, points_of_ref, transports]
  columns:
    id:                 { type: integer(4), primary: true, notnull: true, autoincrement: true }
    name:               { type: string(250) }
    detail:             { type: text }
    address:            { type: text }
    points_of_ref:      { type: text }
    transports:         { type: text }
    google_map:         { type: text }
    pdf_file:           { type: string(50) }
    qr_code:            { type: string(50) }
    square_meters:      { type: integer(4), default: 0 }
    covered_area:       { type: integer(4), default: 0 }
    years_antiquity:    { type: integer(4), default: 0 }
    qty_bathrooms:      { type: integer(4), default: 1 }
    has_garage:         { type: boolean, default: false }
    has_swimming_pool:  { type: boolean, default: false }
    has_dep_of_service: { type: boolean, default: false }
    has_balcony:        { type: boolean, default: false }
    has_bbq:            { type: boolean, default: false }
    owner_name:         { type: string(100) }
    owner_phone:        { type: string(50) }
    owner_email:        { type: string(250) }
    bedroom_id:         { type: integer(4), notnull: true }
    property_type_id:   { type: integer(4), notnull: true }
    geo_zone_id:        { type: integer(4), notnull: true }
    city_id:            { type: integer(4), notnull: true }
    neighborhood_id:    { type: integer(4), notnull: true }
    app_user_id:        { type: integer(4), notnull: true }
    updated:            { type: datetime }

  relations:
    Bedroom:       { class: Bedroom, local: bedroom_id, foreign: id, foreignAlias: Bedroom, onDelete: CASCADE }
    PropertyType:  { class: PropertyType, local: property_type_id, foreign: id, foreignAlias: PropertyType, onDelete: CASCADE }
    GeoZone:       { class: GeoZone, local: geo_zone_id, foreign: id, foreignAlias: GeoZone, onDelete: CASCADE }
    City:          { class: City, local: city_id, foreign: id, foreignAlias: City, onDelete: CASCADE }
    Neighborhood:  { class: Neighborhood, local: neighborhood_id, foreign: id, foreignAlias: Neighborhood, onDelete: CASCADE }
    AppUser:       { class: AppUser, local: app_user_id, foreign: id, foreignAlias: AppUser, onDelete: CASCADE }

#
# OPERATION_REAL_PROPERTY
#
OperationRealProperty:
  tableName: operation_real_property
  columns:
    operation_id:     { type: integer(4), primary: true, notnull: true }
    real_property_id: { type: integer(4), primary: true, notnull: true }
    price:            { type: decimal(10), scale: 2, default: 0 }
    currency_id:      { type: integer(4), notnull: true }

  relations:
    Operation:    { class: Operation, local: operation_id, foreign: id, foreignAlias: OperationRealProperties, onDelete: CASCADE }
    RealProperty: { class: RealProperty, local: real_property_id, foreign: id, foreignAlias: OperationRealProperties, onDelete: CASCADE }
    Currency:     { class: Currency, local: currency_id, foreign: id, foreignAlias: Currency, onDelete: CASCADE }

#
# GALLERY
#
Gallery:
  tableName: gallery
  columns:
    id:               { type: integer(4), primary: true, notnull: true, autoincrement: true }
    former_name:      { type: string(150) }
    internal_name:    { type: string(50) }
    outstanding:      { type: boolean, default: false }
    real_property_id: { type: integer(4), notnull: true }

  relations:
    RealProperty:  { class: RealProperty, local: real_property_id, foreign: id, foreignAlias: RealProperty, onDelete: CASCADE }

#
# VIDEO
#
Video:
  tableName: video
  columns:
    id:               { type: integer(4), primary: true, notnull: true, autoincrement: true }
    youtube:          { type: text }
    uploaded:         { type: string(50) }
    real_property_id: { type: integer(4), notnull: true }

  relations:
    RealProperty:  { class: RealProperty, local: real_property_id, foreign: id, foreignAlias: RealProperty, onDelete: CASCADE }

#
# SEARCH_PROFILE
#
SearchProfile:
  tableName: search_profile
  columns:
    id:               { type: integer(4), primary: true, notnull: true, autoincrement: true }
    property_type_id: { type: integer(4) }
    operation_id:     { type: integer(4) }
    geo_zone_id:      { type: integer(4) }
    city_id:          { type: integer(4) }
    neighborhood_id:  { type: integer(4) }
    app_user_id:      { type: integer(4) }
    min_price:        { type: decimal(10), scale: 2, default: 0 }
    max_price:        { type: decimal(10), scale: 2, default: 0 }
    currency_id:      { type: integer(4) }
    is_vendor:        { type: boolean, default: false }
    reference:        { type: string(150) }

  relations:
    PropertyType: { class: PropertyType, local: property_type_id, foreign: id, foreignAlias: PropertyType, onDelete: SET NULL }
    Operation:    { class: Operation, local: operation_id, foreign: id, foreignAlias: Operation, onDelete: SET NULL }
    GeoZone:      { class: GeoZone, local: geo_zone_id, foreign: id, foreignAlias: GeoZone, onDelete: SET NULL }
    City:         { class: City, local: city_id, foreign: id, foreignAlias: City, onDelete: SET NULL }
    Neighborhood: { class: Neighborhood, local: neighborhood_id, foreign: id, foreignAlias: Neighborhood, onDelete: SET NULL }
    AppUser:      { class: AppUser, local: app_user_id, foreign: id, foreignAlias: AppUser, onDelete: SET NULL }
    Currency:     { class: Currency, local: currency_id, foreign: id, foreignAlias: Currency, onDelete: SET NULL }

#
# SEARCH_MATCH
#
SearchMatch:
  tableName: search_match
  columns:
    search_profile_id: { type: integer(4), primary: true, notnull: true }
    real_property_id:  { type: integer(4), primary: true, notnull: true }

  relations:
    SearchProfile: { class: SearchProfile, local: search_profile_id, foreign: id, foreignAlias: SearchMatches, onDelete: CASCADE }
    RealProperty:  { class: RealProperty, local: real_property_id, foreign: id, foreignAlias: SearchMatches, onDelete: CASCADE }